// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator idt {
  provider = "prisma-idt-generator"
}

model Path {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String
  courses             Course[]
  studentPathInstance StudentPathInstance[]
  pathInstances       PathInstance[]
  createdDate         DateTime
  updatedDate         DateTime
  createdUserName     String
  createdUserId       Int
  updatedUserName     String
  updatedUserId       Int
}

model PathInstance {
  id                         Int                   @id @default(autoincrement())
  name                       String
  description                String
  dateFrom                   DateTime
  dateTo                     DateTime
  numberOfStudents           Int
  numberOfRegisteredStudents Int                   @default(0)
  stilOpen                   Boolean?              @default(false)
  studentPathInstance        StudentPathInstance[]
  courseInstance             CourseInstance[]
  pathId                     Int
  pathName                   String
  path                       Path                  @relation(fields: [pathId], references: [id])
  createdDate                DateTime
  updatedDate                DateTime
  createdUserName            String
  createdUserId              Int
  updatedUserName            String
  updatedUserId              Int
}

model Course {
  id              Int              @id @default(autoincrement())
  name            String
  pathId          Int
  pathName        String
  path            Path             @relation(fields: [pathId], references: [id])
  courseInstances CourseInstance[]
  lessons         Json
  quiz            Json
  createdDate     DateTime
  updatedDate     DateTime
  createdUserName String
  createdUserId   Int
  updatedUserName String
  updatedUserId   Int
}

model CourseInstance {
  id               Int            @id @default(autoincrement())
  name             String
  courseId         Int
  courseName       String
  course           Course         @relation(fields: [courseId], references: [id])
  pathInstanceId   Int
  pathInstanceName String
  pathInstance     PathInstance   @relation(fields: [pathInstanceId], references: [id])
  description      String
  dateFrom         DateTime
  dateTo           DateTime
  book             String
  lessons          Json
  quizzes          QuizInstance[]
  pageFrom         Int
  pageTo           Int
  teacherId        Int
  teacherName      String
  teacher          Teacher        @relation(fields: [teacherId], references: [id])
  createdDate      DateTime
  updatedDate      DateTime
  createdUserName  String
  createdUserId    Int
  updatedUserName  String
  updatedUserId    Int
}

model StudentPathInstance {
  id               Int          @id @default(autoincrement())
  mark             Int
  fullMark         Int
  studentId        Int
  studentName      String
  student          Student      @relation(fields: [studentId], references: [id])
  pathInstanceId   Int
  pathInstanceName String
  pathInstance     PathInstance @relation(fields: [pathInstanceId], references: [id])
  pathId           Int
  path             Path         @relation(fields: [pathId], references: [id])
  pathName         String
  createdDate      DateTime
  updatedDate      DateTime
  createdUserName  String
  createdUserId    Int
  updatedUserName  String
  updatedUserId    Int
}

model QuizInstance {
  id                 Int                   @id @default(autoincrement())
  name               String
  dateFrom           DateTime
  dateTo             DateTime
  mark               Float
  quizStudents       QuizInstanceStudent[]
  questions          Json
  courseInstanceId   Int
  courseInstanceName String
  courseInstance     CourseInstance        @relation(fields: [courseInstanceId], references: [id])
  createdDate        DateTime
  updatedDate        DateTime
  createdUserName    String
  createdUserId      Int
  updatedUserName    String
  updatedUserId      Int
}

model QuizInstanceStudent {
  id                 Int          @id @default(autoincrement())
  fullMark           Float
  mark               Float
  date               DateTime
  quizId             Int
  quizName           String
  quiz               QuizInstance @relation(fields: [quizId], references: [id])
  studentId          Int
  studentName        String
  student            Student      @relation(fields: [studentId], references: [id])
  answerOptions      Json
  createdDate        DateTime
  updatedDate        DateTime
  createdUserName    String
  createdUserId      Int
  updatedUserName    String
  updatedUserId      Int
}

model Student {
  id                  Int                   @id
  name                String
  user                User                  @relation(fields: [id], references: [id])
  student_info        Json
  quizStudents        QuizInstanceStudent[]
  pathInformation     Json
  studentPathInstance StudentPathInstance[]
  createdDate         DateTime
  updatedDate         DateTime
  createdUserName     String
  createdUserId       Int
  updatedUserName     String
  updatedUserId       Int
}

model Teacher {
  id              Int              @id
  name            String
  user            User             @relation(fields: [id], references: [id])
  courseInstances CourseInstance[]
  createdDate     DateTime
  updatedDate     DateTime
  createdUserName String
  createdUserId   Int
  updatedUserName String
  updatedUserId   Int
}

model User {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  password        String
  language        Language
  roles           Role[]
  teacher         Teacher?
  studnet         Student?
  createdDate     DateTime
  updatedDate     DateTime
  createdUserName String
  createdUserId   Int
  updatedUserName String
  updatedUserId   Int
}

model MediaFolder {
  id         Int           @id @default(autoincrement())
  name       String
  parentId   Int?
  parentName String?
  parent     MediaFolder?  @relation("children", fields: [parentId], references: [id])
  children   MediaFolder[] @relation("children")

  medias          Media[]
  createdDate     DateTime
  updatedDate     DateTime
  createdUserName String
  createdUserId   Int
  updatedUserName String
  updatedUserId   Int
}

model Media {
  id              Int         @id @default(autoincrement())
  name            String
  url             String
  ext             String
  mimetype        String
  type            MediaType
  size            Int
  folderId        Int
  folderName      String
  folder          MediaFolder @relation(fields: [folderId], references: [id])
  createdDate     DateTime
  updatedDate     DateTime
  createdUserName String
  createdUserId   Int
  updatedUserName String
  updatedUserId   Int
}

enum MediaType {
  IMAGE
  VIDEO
  PDF
}

enum Role {
  TEACHER
  STUDENT
}

enum Language {
  ar
  en_EN
}
