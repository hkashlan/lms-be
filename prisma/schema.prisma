// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  dryRun   = false
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Path {
  id                  Int                   @id @default(autoincrement())
  title               String
  description         String
  courses             Course[]
  studentPathInstance StudentPathInstance[]
}

model PathInstance {
  id                            Int                   @id @default(autoincrement())
  title                         String
  description                   String
  date_from                     DateTime
  date_to                       DateTime
  number_of_students            Int
  number_of_registered_students Int
  stil_open                     Boolean?              @default(false)
  quiz_instance_students        QuizInstanceStudent[]
  student_path_instance         StudentPathInstance[]
}

model Course {
  id               Int              @id @default(autoincrement())
  title            String
  pathId           Int
  path             Path             @relation(fields: [pathId], references: [id])
  course_instances CourseInstance[]
  lessons          Json
}

model CourseInstance {
  id               Int            @id @default(autoincrement())
  course_id        Int
  path_instance_id Int
  title            String
  description      String
  date_from        DateTime
  date_to          DateTime
  book             String
  lessons          Json
  quizzes          QuizInstance[]
  course           Course         @relation(fields: [courseId], references: [id])
  courseId         Int
  page_from        Int
  page_to          Int
  teacherId        Int
  teacher          Teacher        @relation(fields: [teacherId], references: [id])
}

model StudentPathInstance {
  id             Int          @id @default(autoincrement())
  mark           Int
  fullMark       Int
  studentId      Int
  student        Student      @relation(fields: [studentId], references: [id])
  pathInstanceId Int
  Path_instance  PathInstance @relation(fields: [pathInstanceId], references: [id])
  pathId         Int
  path           Path         @relation(fields: [pathId], references: [id])
}

model Student {
  id                    Int                   @id @default(autoincrement())
  name                  String
  password              String
  student_info          Json
  quiz_students         QuizInstanceStudent[]
  pathInformation       Json
  student_path_instance StudentPathInstance[]
}

model QuizInstance {
  id                 Int                   @id @default(autoincrement())
  title              String
  date_from          DateTime
  date_to            DateTime
  mark               Float
  quiz_students      QuizInstanceStudent[]
  questions          Json
  course_instance_id Int
  course_instance    CourseInstance        @relation(fields: [course_instance_id], references: [id])
}

model QuizInstanceStudent {
  id               Int          @id @default(autoincrement())
  full_mark        Float
  mark             Float
  date             DateTime
  quiz_id          Int
  student_id       Int
  path_instance_id Int
  answerOptions    Json
  quiz             QuizInstance @relation(fields: [quiz_id], references: [id])
  student          Student      @relation(fields: [student_id], references: [id])
  path_instance    PathInstance @relation(fields: [path_instance_id], references: [id])
}

model Teacher {
  id              Int              @id @default(autoincrement())
  name            String
  password        String
  phone           Int
  email           String
  courseInstances CourseInstance[]
}
