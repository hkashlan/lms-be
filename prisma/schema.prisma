// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "../src/app/core/models"
}

model Path {
  id                  Int                   @id @default(autoincrement())
  name                String                
  description         String
  courses             Course[]
  studentPathInstance StudentPathInstance[]
  createdDate         DateTime
  updatedDate          DateTime
  createdUser         String
  updatedUser         String
  
}

model PathInstance {
  id                         Int                   @id @default(autoincrement())
  name                       String
  description                String
  dateFrom                   DateTime
  dateTo                     DateTime
  numberOfStudents           Int
  numberOfRegisteredStudents Int
  stilOpen                   Boolean?              @default(false)
  createdDate         DateTime
  updatedDate          DateTime
  createdUser         String
  updatedUser          String
  quizInstanceStudents       QuizInstanceStudent[]
  studentPathInstance        StudentPathInstance[]
  CourseInstance             CourseInstance[]
}

model Course {
  id              Int              @id @default(autoincrement())
  name            String
  pathId          Int
  pathName        String
  createdDate         DateTime
  updatedDate          DateTime
  createdUser         String
  updatedUser         String
  path            Path             @relation(fields: [pathId], references: [id])
  courseInstances CourseInstance[]
  lessons         Json
}

model CourseInstance {
  id               Int            @id @default(autoincrement())
  name             String
  courseId         Int
  courseName       String
  course           Course         @relation(fields: [courseId], references: [id])
  pathInstanceId   Int
  pathInstanceName String
  pathInstance     PathInstance   @relation(fields: [pathInstanceId], references: [id])
  description      String
  dateFrom         DateTime
  dateTo           DateTime
  createdDate         DateTime
  updatedDate          DateTime
  createdUser         String
  updatedUser         String
  book             String
  lessons          Json
  quizzes          QuizInstance[]
  pageFrom         Int
  pageTo           Int
  teacherId        Int
  teacherName      String
  teacher          Teacher        @relation(fields: [teacherId], references: [id])
}

model StudentPathInstance {
  id               Int          @id @default(autoincrement())
  mark             Int
  fullMark         Int
  createdDate         DateTime
  updatedDate          DateTime
  createdUser         String
  updatedUser          String
  studentId        Int
  studentName      String
  student          Student      @relation(fields: [studentId], references: [id])
  pathInstanceId   Int
  pathInstanceName String
  pathInstance     PathInstance @relation(fields: [pathInstanceId], references: [id])
  pathId           Int
  path             Path         @relation(fields: [pathId], references: [id])
  pathName         String
}

model Student {
  id                  Int                   @id @default(autoincrement())
  name                String
  password            String
  student_info        Json
  quizStudents        QuizInstanceStudent[]
  pathInformation     Json
  studentPathInstance StudentPathInstance[]
  createdDate         DateTime
  updatedDate          DateTime
}

model QuizInstance {
  id                 Int                   @id @default(autoincrement())
  name               String
  dateFrom           DateTime
  dateTo             DateTime
  createdDate         DateTime
  updatedDate          DateTime
  createdUser         String
  updatedUser          String
  mark               Float
  quizStudents       QuizInstanceStudent[]
  questions          Json
  courseInstanceId   Int
  courseInstanceName String
  courseInstance     CourseInstance        @relation(fields: [courseInstanceId], references: [id])
}

model QuizInstanceStudent {
  id                 Int          @id @default(autoincrement())
  fullMark           Float
  mark               Float
  date               DateTime
  createdDate         DateTime
  updatedDate          DateTime
  createdUser         String
  updatedUser          String
  quizId             Int
  quizName           String
  quiz               QuizInstance @relation(fields: [quizId], references: [id])
  studentId          Int
  studentName        String
  student            Student      @relation(fields: [studentId], references: [id])
  pathInstanceId     Int
  pathInstanceString String
  pathInstance       PathInstance @relation(fields: [pathInstanceId], references: [id])
  answerOptions      Json
}

model Teacher {
  id              Int              @id @default(autoincrement())
  name            String
  password        String
  createdDate         DateTime
  updatedDate          DateTime
  createdUser         String
  updatedUser          String
  phone           Int
  email           String           @unique
  courseInstances CourseInstance[]
}
